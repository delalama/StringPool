import java.util.LinkedHashMap;
import java.util.LinkedHashSet;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class StringsTest {

    @Test
    public void testStringsWithSameValuePointsToSameMemoryLocation() {
        // When you create a string, it is stored in the String pool

        // given
        String a = "a";
        String b = "a";

        // then
        boolean sameObject = a == b;

        Assertions.assertTrue(sameObject);
        // Why?
        int idA = System.identityHashCode(a);
        int idB = System.identityHashCode(b);
        Assertions.assertEquals(idA, idB);
        // Now a and b are pointing to the same object
    }

    @Test
    public void testStringWithDifferentValuePointsDifferentLocation() {
        // given
        String a = "a";
        String b = "a";

        int idA = System.identityHashCode(a);
        int idB = System.identityHashCode(b);
        Assertions.assertEquals(idA, idB);

        // when
        b = "b";

        // then
        idB = System.identityHashCode(b);
        Assertions.assertNotEquals(idA, idB);

        // Why? b has received the referenc
        // on line 38 one new string has been added to the String pool
        // and b has received the reference to that new string

        b = "a";
        idB = System.identityHashCode(b);
        Assertions.assertEquals(idA, idB);
    }

    @Test
    public void testStringObjectsHasItsOwnMemoryLocation() {
        // given
        String a = new String("a");
        String b = new String("a");
        String c = "a";
        String d = "a";

        // then
        int idA = System.identityHashCode(a);
        int idB = System.identityHashCode(b);
        Assertions.assertNotEquals(idA, idB);

        int idC = System.identityHashCode(c);
        int idD = System.identityHashCode(d);
        Assertions.assertEquals(idC, idD);

        LinkedHashSet map = new LinkedHashSet();
        map.add(a);
        map.add(b);
        map.add(c);
        map.add(d);

        // Now a and b are totally different objects

        int hashA = a.hashCode();
        int hashB = b.hashCode();
        Assertions.assertEquals(hashA, hashB);
        // this hash is generated by String class, and It can be understood
        // as a numeric representation of the string value.
    }

    @Test
    public void testStringImmutable() {
        // given
        String string1 = "a";
        // "a" String is stored in the String pool
        // string1 receives the reference of "a"
        // demo
        System.identityHashCode("a");
        System.identityHashCode(string1);
        Assertions.assertEquals("a", string1);
    }

    @Test
    public void testStringInstancesImmutable() {
        // given
        String string1 = "a";
        string1 = "b";

        final String string2 = "a";
        // string2 = "b";  // this does not compile

    }

}
